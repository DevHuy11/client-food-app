{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { getDataPizza, getDataSushi, getDataHamburger, getDataPancake, getDataDumplings, getDataCupcake } from \"./dataCreateAsyncThunk\";\nconst dataPizzaSlice = createSlice({\n  name: \"pizza\",\n  initialState: {},\n  extraReducers: {\n    [getDataPizza.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getDataPizza.fulfilled]: (state, action) => {\n      state.status = \"success\";\n      state.pizza = action.payload;\n    },\n    [getDataPizza.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n});\nconst dataSushiSlice = createSlice({\n  name: \"sushi\",\n  initialState: {},\n  extraReducers: {\n    [getDataSushi.pending]: (state, action) => {\n      state.status = \"loading\";\n    },\n    [getDataSushi.fulfilled]: (state, action) => {\n      state.status = \"success\";\n      state.sushi = action.payload;\n    },\n    [getDataSushi.rejected]: (state, action) => {\n      state.status = \"failed\";\n    }\n  }\n}); //Reducers\n\nconst dataPizzaReducers = dataPizzaSlice.reducer;\nconst dataSushiReducers = dataSushiSlice.reducer;\nexport { dataPizzaReducers, dataSushiReducers };","map":{"version":3,"sources":["C:/Users/abc/OneDrive/Documents/Do_an_shop/app/src/features/dataSlice.js"],"names":["createSlice","getDataPizza","getDataSushi","getDataHamburger","getDataPancake","getDataDumplings","getDataCupcake","dataPizzaSlice","name","initialState","extraReducers","pending","state","action","status","fulfilled","pizza","payload","rejected","dataSushiSlice","sushi","dataPizzaReducers","reducer","dataSushiReducers"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AACA,SACIC,YADJ,EACkBC,YADlB,EACgCC,gBADhC,EAEIC,cAFJ,EAGIC,gBAHJ,EAGsBC,cAHtB,QAIO,wBAJP;AAOA,MAAMC,cAAc,GAAGP,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,YAAY,EAAE,EAFiB;AAG/BC,EAAAA,aAAa,EAAE;AACX,KAACT,YAAY,CAACU,OAAd,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACE,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACb,YAAY,CAACc,SAAd,GAA0B,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACE,MAAN,GAAe,SAAf;AACAF,MAAAA,KAAK,CAACI,KAAN,GAAcH,MAAM,CAACI,OAArB;AACD,KAPU;AAQX,KAAChB,YAAY,CAACiB,QAAd,GAAyB,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACE,MAAN,GAAe,QAAf;AACH;AAVU;AAHgB,CAAD,CAAlC;AAiBA,MAAMK,cAAc,GAAGnB,WAAW,CAAC;AAC/BQ,EAAAA,IAAI,EAAE,OADyB;AAE/BC,EAAAA,YAAY,EAAE,EAFiB;AAG/BC,EAAAA,aAAa,EAAE;AACX,KAACR,YAAY,CAACS,OAAd,GAAwB,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACvCD,MAAAA,KAAK,CAACE,MAAN,GAAe,SAAf;AACH,KAHU;AAIX,KAACZ,YAAY,CAACa,SAAd,GAA0B,CAACH,KAAD,EAAQC,MAAR,KAAmB;AAC3CD,MAAAA,KAAK,CAACE,MAAN,GAAe,SAAf;AACAF,MAAAA,KAAK,CAACQ,KAAN,GAAcP,MAAM,CAACI,OAArB;AACD,KAPU;AAQX,KAACf,YAAY,CAACgB,QAAd,GAAyB,CAACN,KAAD,EAAQC,MAAR,KAAmB;AACxCD,MAAAA,KAAK,CAACE,MAAN,GAAe,QAAf;AACH;AAVU;AAHgB,CAAD,CAAlC,C,CAmBA;;AAEA,MAAMO,iBAAiB,GAAGd,cAAc,CAACe,OAAzC;AACA,MAAMC,iBAAiB,GAAGJ,cAAc,CAACG,OAAzC;AACA,SAASD,iBAAT,EAA4BE,iBAA5B","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\"\r\nimport {\r\n    getDataPizza, getDataSushi, getDataHamburger,\r\n    getDataPancake,\r\n    getDataDumplings, getDataCupcake\r\n} from \"./dataCreateAsyncThunk\"\r\n    \r\n\r\nconst dataPizzaSlice = createSlice({\r\n    name: \"pizza\",\r\n    initialState: {},\r\n    extraReducers: {\r\n        [getDataPizza.pending]: (state, action) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [getDataPizza.fulfilled]: (state, action) => {\r\n          state.status = \"success\";\r\n          state.pizza = action.payload;\r\n        },\r\n        [getDataPizza.rejected]: (state, action) => {\r\n            state.status = \"failed\";\r\n        },\r\n    }\r\n})\r\n\r\nconst dataSushiSlice = createSlice({\r\n    name: \"sushi\",\r\n    initialState: {},\r\n    extraReducers: {\r\n        [getDataSushi.pending]: (state, action) => {\r\n            state.status = \"loading\";\r\n        },\r\n        [getDataSushi.fulfilled]: (state, action) => {\r\n          state.status = \"success\";\r\n          state.sushi = action.payload;\r\n        },\r\n        [getDataSushi.rejected]: (state, action) => {\r\n            state.status = \"failed\";\r\n        },\r\n    }\r\n})\r\n\r\n\r\n\r\n//Reducers\r\n\r\nconst dataPizzaReducers = dataPizzaSlice.reducer\r\nconst dataSushiReducers = dataSushiSlice.reducer\r\nexport { dataPizzaReducers, dataSushiReducers };"]},"metadata":{},"sourceType":"module"}